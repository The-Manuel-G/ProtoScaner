// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using ProtoScaner.Server.Models;

#nullable disable

namespace ProtoScaner.Server.Migrations.ProtoScanner3D
{
    [DbContext(typeof(ProtoScanner3DContext))]
    [Migration("20241016041252_UpdateProtesisCedula")]
    partial class UpdateProtesisCedula
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.10")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("ProtoScaner.Server.Models.CausaAmputacion", b =>
                {
                    b.Property<int>("IdCausa")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("Id_causa");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("IdCausa"));

                    b.Property<string>("Descripcion")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("descripcion");

                    b.HasKey("IdCausa")
                        .HasName("PK__Causa_Am__110B92100C49024C");

                    b.ToTable("Causa_Amputacion", (string)null);
                });

            modelBuilder.Entity("ProtoScaner.Server.Models.Componente", b =>
                {
                    b.Property<int>("ComponentId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("ComponentID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ComponentId"));

                    b.Property<string>("Codigo")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("codigo");

                    b.Property<int?>("ComponentTipoId")
                        .HasColumnType("int")
                        .HasColumnName("ComponentTipoID");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.HasKey("ComponentId")
                        .HasName("PK__Componen__D79CF02E628E1ABC");

                    b.HasIndex("ComponentTipoId");

                    b.ToTable("Componentes");
                });

            modelBuilder.Entity("ProtoScaner.Server.Models.ComponenteTipo", b =>
                {
                    b.Property<int>("ComponentTipoId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("ComponentTipoID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ComponentTipoId"));

                    b.Property<string>("TipoNombre")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("ComponentTipoId")
                        .HasName("PK__Componen__70E6A0E0719BEA11");

                    b.ToTable("Componente_Tipos", (string)null);
                });

            modelBuilder.Entity("ProtoScaner.Server.Models.Entrega", b =>
                {
                    b.Property<int>("IdEntregas")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("Id_Entregas");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("IdEntregas"));

                    b.Property<DateOnly?>("FechaEntrega")
                        .HasColumnType("date")
                        .HasColumnName("fecha_Entrega");

                    b.Property<bool?>("FirmaDescargoComponenteLista")
                        .HasColumnType("bit")
                        .HasColumnName("Firma_descargo_componente_lista");

                    b.Property<string>("GeneralModificacion")
                        .HasColumnType("text")
                        .HasColumnName("general_Modificacion");

                    b.Property<int?>("IdMantenimiento")
                        .HasColumnType("int")
                        .HasColumnName("Id_mantenimiento");

                    b.Property<int?>("IdPaciente")
                        .HasColumnType("int")
                        .HasColumnName("Id_Paciente");

                    b.Property<int?>("IdProtesis")
                        .HasColumnType("int")
                        .HasColumnName("Id_Protesis");

                    b.Property<int?>("IdPruebaSocket")
                        .HasColumnType("int")
                        .HasColumnName("Id_prueba_Socket");

                    b.Property<int?>("IdUsuario")
                        .HasColumnType("int")
                        .HasColumnName("Id_Usuario");

                    b.Property<bool?>("Insidencia")
                        .HasColumnType("bit");

                    b.Property<DateOnly?>("MantenimientoPostEntrega")
                        .HasColumnType("date")
                        .HasColumnName("Mantenimiento_post_entrega");

                    b.Property<string>("MaterialRelleno")
                        .HasColumnType("text")
                        .HasColumnName("material_relleno");

                    b.Property<string>("Otros")
                        .HasColumnType("text");

                    b.Property<DateOnly?>("PracticaMarcha")
                        .HasColumnType("date")
                        .HasColumnName("practica_Marcha");

                    b.Property<decimal?>("Reduccion")
                        .HasColumnType("decimal(18, 0)");

                    b.HasKey("IdEntregas")
                        .HasName("PK__Entregas__39E3689C5F42B7C3");

                    b.HasIndex("IdMantenimiento");

                    b.HasIndex("IdPaciente");

                    b.HasIndex("IdProtesis");

                    b.HasIndex("IdPruebaSocket");

                    b.HasIndex("IdUsuario");

                    b.ToTable("Entregas");
                });

            modelBuilder.Entity("ProtoScaner.Server.Models.EstatusPaciente", b =>
                {
                    b.Property<int>("IdEstatusPaciente")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("Id_Estatus_paciente");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("IdEstatusPaciente"));

                    b.Property<string>("Descripcion")
                        .HasMaxLength(20)
                        .IsUnicode(false)
                        .HasColumnType("varchar(20)");

                    b.HasKey("IdEstatusPaciente")
                        .HasName("PK__Estatus___2683C758AFE3CB75");

                    b.ToTable("Estatus_paciente", (string)null);
                });

            modelBuilder.Entity("ProtoScaner.Server.Models.EstatusProtesi", b =>
                {
                    b.Property<int>("IdEstatusProtesis")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("Id_Estatus_protesis");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("IdEstatusProtesis"));

                    b.Property<string>("Descripcion")
                        .HasMaxLength(20)
                        .IsUnicode(false)
                        .HasColumnType("varchar(20)");

                    b.HasKey("IdEstatusProtesis")
                        .HasName("PK__Estatus___34BA47CC095E88D0");

                    b.ToTable("Estatus_protesis", (string)null);
                });

            modelBuilder.Entity("ProtoScaner.Server.Models.Genero", b =>
                {
                    b.Property<int>("IdGenero")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("Id_Genero");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("IdGenero"));

                    b.Property<string>("Genero1")
                        .HasMaxLength(20)
                        .IsUnicode(false)
                        .HasColumnType("varchar(20)")
                        .HasColumnName("Genero");

                    b.HasKey("IdGenero")
                        .HasName("PK__Genero__E76DD66E2303B4F7");

                    b.ToTable("Genero", (string)null);
                });

            modelBuilder.Entity("ProtoScaner.Server.Models.HistorialCambio", b =>
                {
                    b.Property<int>("IdHistorial")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id_historial");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("IdHistorial"));

                    b.Property<byte[]>("FechaMidificacion")
                        .IsConcurrencyToken()
                        .IsRequired()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("rowversion")
                        .HasColumnName("fecha_midificacion");

                    b.Property<int?>("IdRegistroModificado")
                        .HasColumnType("int")
                        .HasColumnName("id_registro_modificado");

                    b.Property<int?>("IdUsuario")
                        .HasColumnType("int")
                        .HasColumnName("id_usuario");

                    b.Property<string>("Operacion")
                        .HasMaxLength(10)
                        .IsUnicode(false)
                        .HasColumnType("varchar(10)")
                        .HasColumnName("operacion");

                    b.Property<string>("TablaModificada")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("tabla_modificada");

                    b.Property<string>("ValorAnterior")
                        .IsUnicode(false)
                        .HasColumnType("varchar(max)")
                        .HasColumnName("valor_anterior");

                    b.Property<string>("ValorNuevo")
                        .IsUnicode(false)
                        .HasColumnType("varchar(max)")
                        .HasColumnName("valor_nuevo");

                    b.HasKey("IdHistorial")
                        .HasName("PK__Historia__76E6C502907F7B3B");

                    b.HasIndex("IdUsuario");

                    b.ToTable("Historial_Cambios", (string)null);
                });

            modelBuilder.Entity("ProtoScaner.Server.Models.HistorialLogin", b =>
                {
                    b.Property<int>("IdHistorial")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id_historial");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("IdHistorial"));

                    b.Property<string>("Direccion")
                        .HasMaxLength(150)
                        .IsUnicode(false)
                        .HasColumnType("varchar(150)")
                        .HasColumnName("direccion");

                    b.Property<string>("Dispositivo")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("dispositivo");

                    b.Property<bool?>("Exito")
                        .HasColumnType("bit")
                        .HasColumnName("exito");

                    b.Property<byte[]>("FechaLogin")
                        .IsConcurrencyToken()
                        .IsRequired()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("rowversion")
                        .HasColumnName("fecha_login");

                    b.Property<int?>("IdUsuario")
                        .HasColumnType("int")
                        .HasColumnName("id_usuario");

                    b.HasKey("IdHistorial")
                        .HasName("PK__Historia__76E6C50220F920E5");

                    b.HasIndex("IdUsuario");

                    b.ToTable("Historial_Login", (string)null);
                });

            modelBuilder.Entity("ProtoScaner.Server.Models.HistorialPacienteIngreso", b =>
                {
                    b.Property<int>("IdHistorial")
                        .HasColumnType("int")
                        .HasColumnName("Id_historial");

                    b.Property<int?>("Causa")
                        .HasColumnType("int");

                    b.Property<string>("Comentario")
                        .HasColumnType("text");

                    b.Property<DateOnly?>("FechaAmputacion")
                        .HasColumnType("date")
                        .HasColumnName("fecha_amputacion");

                    b.Property<int?>("IdMedida")
                        .HasColumnType("int")
                        .HasColumnName("Id_Medida");

                    b.Property<int?>("IdPaciente")
                        .HasColumnType("int")
                        .HasColumnName("Id_paciente");

                    b.Property<int?>("LadoAmputacion")
                        .HasColumnType("int")
                        .HasColumnName("lado_amputacion");

                    b.Property<bool?>("Terapia")
                        .HasColumnType("bit");

                    b.Property<string>("TiempoTerapia")
                        .HasMaxLength(60)
                        .IsUnicode(false)
                        .HasColumnType("varchar(60)")
                        .HasColumnName("Tiempo_terapia");

                    b.Property<int?>("TipoAmputacion")
                        .HasColumnType("int")
                        .HasColumnName("tipo_amputacion");

                    b.HasKey("IdHistorial")
                        .HasName("PK__Historia__EA5F513B2EE7129D");

                    b.HasIndex("Causa");

                    b.HasIndex("IdPaciente");

                    b.HasIndex("LadoAmputacion");

                    b.HasIndex("TipoAmputacion");

                    b.ToTable("Historial_Paciente_Ingreso", (string)null);
                });

            modelBuilder.Entity("ProtoScaner.Server.Models.ImagenPerfil", b =>
                {
                    b.Property<int>("IdImagen")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id_imagen");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("IdImagen"));

                    b.Property<string>("Descripcion")
                        .HasColumnType("text")
                        .HasColumnName("descripcion");

                    b.Property<int?>("IdUsuario")
                        .HasColumnType("int")
                        .HasColumnName("Id_usuario");

                    b.Property<byte[]>("Imagen")
                        .HasMaxLength(1)
                        .HasColumnType("varbinary(1)")
                        .HasColumnName("imagen");

                    b.HasKey("IdImagen")
                        .HasName("PK__Imagen_P__27CC2689856A21A1");

                    b.HasIndex("IdUsuario");

                    b.ToTable("Imagen_Perfil", (string)null);
                });

            modelBuilder.Entity("ProtoScaner.Server.Models.Insidencia", b =>
                {
                    b.Property<int>("IdInsidencias")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("Id_Insidencias");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("IdInsidencias"));

                    b.Property<string>("Componentes")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)");

                    b.Property<string>("Descripcion")
                        .IsUnicode(false)
                        .HasColumnType("varchar(max)")
                        .HasColumnName("descripcion");

                    b.Property<DateOnly?>("Fecha")
                        .HasColumnType("date");

                    b.Property<int?>("IdEntregas")
                        .HasColumnType("int")
                        .HasColumnName("Id_Entregas");

                    b.Property<int?>("IdPaciente")
                        .HasColumnType("int")
                        .HasColumnName("Id_Paciente");

                    b.Property<int?>("IdProtesis")
                        .HasColumnType("int")
                        .HasColumnName("Id_Protesis");

                    b.Property<int?>("IdUsuario")
                        .HasColumnType("int")
                        .HasColumnName("Id_Usuario");

                    b.HasKey("IdInsidencias")
                        .HasName("PK__Insidenc__FEC33014BD1CD794");

                    b.HasIndex("IdEntregas");

                    b.HasIndex("IdPaciente");

                    b.HasIndex("IdProtesis");

                    b.HasIndex("IdUsuario");

                    b.ToTable("Insidencias");
                });

            modelBuilder.Entity("ProtoScaner.Server.Models.LadoAmputacion", b =>
                {
                    b.Property<int>("IdLado")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("Id_lado");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("IdLado"));

                    b.Property<string>("LadoAmputacion1")
                        .HasMaxLength(12)
                        .IsUnicode(false)
                        .HasColumnType("varchar(12)")
                        .HasColumnName("lado_amputacion");

                    b.HasKey("IdLado")
                        .HasName("PK__Lado_Amp__0C78995056763AFE");

                    b.ToTable("Lado_Amputacion", (string)null);
                });

            modelBuilder.Entity("ProtoScaner.Server.Models.Liner", b =>
                {
                    b.Property<int>("IdLiner")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("Id_Liner");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("IdLiner"));

                    b.Property<string>("Talla")
                        .HasMaxLength(30)
                        .IsUnicode(false)
                        .HasColumnType("varchar(30)")
                        .HasColumnName("talla");

                    b.Property<string>("TipoLiner")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("tipo_liner");

                    b.HasKey("IdLiner")
                        .HasName("PK__Liner__F8F1538DC57D3C43");

                    b.ToTable("Liner", (string)null);
                });

            modelBuilder.Entity("ProtoScaner.Server.Models.LinerTransfemoral", b =>
                {
                    b.Property<int>("IdLiner")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("Id_Liner");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("IdLiner"));

                    b.Property<int?>("TallaId")
                        .HasColumnType("int")
                        .HasColumnName("TallaID");

                    b.Property<int?>("TipoLinerId")
                        .HasColumnType("int")
                        .HasColumnName("TipoLinerID");

                    b.HasKey("IdLiner")
                        .HasName("PK__Liner_Tr__F8F1538D7096A1C3");

                    b.HasIndex("TallaId");

                    b.ToTable("Liner_Transfemoral", (string)null);
                });

            modelBuilder.Entity("ProtoScaner.Server.Models.LinerTranstibial", b =>
                {
                    b.Property<int>("IdLiner")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("Id_Liner");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("IdLiner"));

                    b.Property<int?>("TallaId")
                        .HasColumnType("int")
                        .HasColumnName("TallaID");

                    b.Property<int?>("TipoLinerId")
                        .HasColumnType("int")
                        .HasColumnName("TipoLinerID");

                    b.HasKey("IdLiner")
                        .HasName("PK__Liner_Tr__F8F1538D73C0A2B8");

                    b.HasIndex("TallaId");

                    b.HasIndex("TipoLinerId");

                    b.ToTable("Liner_Transtibial", (string)null);
                });

            modelBuilder.Entity("ProtoScaner.Server.Models.Mantenimiento", b =>
                {
                    b.Property<int>("IdMantenimiento")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id_mantenimiento");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("IdMantenimiento"));

                    b.Property<DateOnly?>("FechaMantenimiento")
                        .HasColumnType("date")
                        .HasColumnName("fecha_mantenimiento");

                    b.Property<int?>("IdComponentes")
                        .HasColumnType("int")
                        .HasColumnName("id_componentes");

                    b.Property<int?>("IdPaciente")
                        .HasColumnType("int")
                        .HasColumnName("Id_paciente");

                    b.Property<int?>("IdProtesis")
                        .HasColumnType("int")
                        .HasColumnName("Id_protesis");

                    b.Property<int?>("IdSocket")
                        .HasColumnType("int")
                        .HasColumnName("Id_socket");

                    b.Property<byte[]>("ImagenFallo1")
                        .HasColumnType("varbinary(max)")
                        .HasColumnName("imagen_fallo1");

                    b.Property<byte[]>("ImagenFallo2")
                        .HasColumnType("varbinary(max)")
                        .HasColumnName("imagen_fallo2");

                    b.Property<int?>("NuevasMedidas")
                        .HasColumnType("int")
                        .HasColumnName("nuevas_medidas");

                    b.Property<int?>("NumSocketsFabricados")
                        .HasColumnType("int")
                        .HasColumnName("num_sockets_fabricados");

                    b.HasKey("IdMantenimiento")
                        .HasName("PK__Mantenim__707E5D16342052AD");

                    b.HasIndex("IdPaciente");

                    b.HasIndex("IdProtesis");

                    b.HasIndex("IdSocket");

                    b.ToTable("Mantenimiento", (string)null);
                });

            modelBuilder.Entity("ProtoScaner.Server.Models.MantenimientoComponente", b =>
                {
                    b.Property<int>("ProtesisId")
                        .HasColumnType("int")
                        .HasColumnName("ProtesisID");

                    b.Property<int>("ComponentId")
                        .HasColumnType("int")
                        .HasColumnName("ComponentID");

                    b.Property<int?>("Cantidad")
                        .HasColumnType("int");

                    b.Property<int?>("IdPaciente")
                        .HasColumnType("int")
                        .HasColumnName("Id_paciente");

                    b.Property<bool?>("Insidencia")
                        .HasColumnType("bit");

                    b.Property<int?>("MantenimientoId")
                        .HasColumnType("int")
                        .HasColumnName("MantenimientoID");

                    b.Property<int?>("Medidas")
                        .HasColumnType("int");

                    b.HasKey("ProtesisId", "ComponentId")
                        .HasName("PK__Mantenim__87BBF2544405C768");

                    b.HasIndex("ComponentId");

                    b.HasIndex("IdPaciente");

                    b.HasIndex("MantenimientoId");

                    b.HasIndex("Medidas");

                    b.ToTable("Mantenimiento_Componentes", (string)null);
                });

            modelBuilder.Entity("ProtoScaner.Server.Models.MedidaTransfemoral", b =>
                {
                    b.Property<int>("IdMedidaT")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("Id_medida_T");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("IdMedidaT"));

                    b.Property<string>("AlturaTalon")
                        .HasMaxLength(30)
                        .IsUnicode(false)
                        .HasColumnType("varchar(30)")
                        .HasColumnName("altura_talon");

                    b.Property<string>("DisenadorSocket")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("disenador_socket");

                    b.Property<DateOnly?>("FechaEscaneo")
                        .HasColumnType("date")
                        .HasColumnName("fecha_escaneo");

                    b.Property<byte[]>("FotoMunon")
                        .HasColumnType("varbinary(max)")
                        .HasColumnName("foto_munon");

                    b.Property<int?>("IdEscaneo")
                        .HasColumnType("int")
                        .HasColumnName("Id_escaneo");

                    b.Property<int?>("IdLiner")
                        .HasColumnType("int")
                        .HasColumnName("id_Liner");

                    b.Property<int?>("IdPaciente")
                        .HasColumnType("int")
                        .HasColumnName("Id_paciente");

                    b.Property<int?>("IdValor")
                        .HasColumnType("int")
                        .HasColumnName("id_valor");

                    b.Property<string>("LongitudPie")
                        .HasMaxLength(30)
                        .IsUnicode(false)
                        .HasColumnType("varchar(30)")
                        .HasColumnName("longitud_pie");

                    b.Property<string>("Medida1")
                        .HasMaxLength(15)
                        .IsUnicode(false)
                        .HasColumnType("varchar(15)");

                    b.Property<string>("Medida2")
                        .HasMaxLength(15)
                        .IsUnicode(false)
                        .HasColumnType("varchar(15)");

                    b.HasKey("IdMedidaT")
                        .HasName("PK__Medida_T__14B4624D5B52A53D");

                    b.HasIndex("IdEscaneo");

                    b.HasIndex("IdLiner");

                    b.HasIndex("IdPaciente");

                    b.ToTable("Medida_Transfemoral", (string)null);
                });

            modelBuilder.Entity("ProtoScaner.Server.Models.MedidaTransfemoralPrueba", b =>
                {
                    b.Property<int>("IdMedida")
                        .HasColumnType("int")
                        .HasColumnName("Id_medida");

                    b.Property<string>("AlturaTalon")
                        .HasMaxLength(30)
                        .IsUnicode(false)
                        .HasColumnType("varchar(30)")
                        .HasColumnName("altura_talon");

                    b.Property<string>("DisenadorSocket")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("disenador_socket");

                    b.Property<DateOnly?>("FechaEscaneo")
                        .HasColumnType("date")
                        .HasColumnName("fecha_escaneo");

                    b.Property<byte[]>("FotoMunon")
                        .HasColumnType("varbinary(max)")
                        .HasColumnName("foto_munon");

                    b.Property<int?>("IdLiner")
                        .HasColumnType("int")
                        .HasColumnName("id_Liner");

                    b.Property<int?>("IdPaciente")
                        .HasColumnType("int")
                        .HasColumnName("Id_paciente");

                    b.Property<int?>("IdPrueba")
                        .HasColumnType("int")
                        .HasColumnName("Id_prueba");

                    b.Property<int?>("IdValor")
                        .HasColumnType("int")
                        .HasColumnName("id_valor");

                    b.Property<string>("LongitudPie")
                        .HasMaxLength(30)
                        .IsUnicode(false)
                        .HasColumnType("varchar(30)")
                        .HasColumnName("longitud_pie");

                    b.Property<string>("Medida1")
                        .HasMaxLength(15)
                        .IsUnicode(false)
                        .HasColumnType("varchar(15)");

                    b.Property<string>("Medida2")
                        .HasMaxLength(15)
                        .IsUnicode(false)
                        .HasColumnType("varchar(15)");

                    b.HasKey("IdMedida")
                        .HasName("PK__Medida_T__88604D55F90C484C");

                    b.HasIndex("IdLiner");

                    b.HasIndex("IdPaciente");

                    b.HasIndex("IdPrueba");

                    b.ToTable("Medida_Transfemoral_Prueba", (string)null);
                });

            modelBuilder.Entity("ProtoScaner.Server.Models.MedidaTranstibial", b =>
                {
                    b.Property<int>("IdMedida")
                        .HasColumnType("int")
                        .HasColumnName("id_medida");

                    b.Property<string>("AlturaTacon")
                        .HasMaxLength(30)
                        .IsUnicode(false)
                        .HasColumnType("varchar(30)")
                        .HasColumnName("altura_tacon");

                    b.Property<decimal?>("ApTension")
                        .HasColumnType("decimal(5, 2)")
                        .HasColumnName("ap_tension");

                    b.Property<decimal?>("Circunferencia12cm")
                        .HasColumnType("decimal(5, 2)")
                        .HasColumnName("circunferencia_12cm");

                    b.Property<decimal?>("Circunferencia15cm")
                        .HasColumnType("decimal(5, 2)")
                        .HasColumnName("circunferencia_15cm");

                    b.Property<decimal?>("Circunferencia21cm")
                        .HasColumnType("decimal(5, 2)")
                        .HasColumnName("circunferencia_21cm");

                    b.Property<decimal?>("Circunferencia24cm")
                        .HasColumnType("decimal(5, 2)")
                        .HasColumnName("circunferencia_24cm");

                    b.Property<decimal?>("Circunferencia27cm")
                        .HasColumnType("decimal(5, 2)")
                        .HasColumnName("circunferencia_27cm");

                    b.Property<decimal?>("Circunferencia30cm")
                        .HasColumnType("decimal(5, 2)")
                        .HasColumnName("circunferencia_30cm");

                    b.Property<decimal?>("Circunferencia3cm")
                        .HasColumnType("decimal(5, 2)")
                        .HasColumnName("circunferencia_3cm");

                    b.Property<decimal?>("Circunferencia6cm")
                        .HasColumnType("decimal(5, 2)")
                        .HasColumnName("circunferencia_6cm");

                    b.Property<decimal?>("Circunferencia9cm")
                        .HasColumnType("decimal(5, 2)")
                        .HasColumnName("circunferencia_9cm");

                    b.Property<DateOnly?>("FechaEscaneo")
                        .HasColumnType("date")
                        .HasColumnName("fecha_escaneo");

                    b.Property<int?>("IdEscaneo")
                        .HasColumnType("int")
                        .HasColumnName("Id_escaneo");

                    b.Property<int?>("IdLiner")
                        .HasColumnType("int")
                        .HasColumnName("Id_Liner");

                    b.Property<int?>("IdPaciente")
                        .HasColumnType("int")
                        .HasColumnName("Id_paciente");

                    b.Property<bool?>("Insidencia")
                        .HasColumnType("bit");

                    b.Property<string>("LongitudOsea")
                        .HasMaxLength(30)
                        .IsUnicode(false)
                        .HasColumnType("varchar(30)")
                        .HasColumnName("longitud_osea");

                    b.Property<string>("LongitudPies")
                        .HasMaxLength(30)
                        .IsUnicode(false)
                        .HasColumnType("varchar(30)")
                        .HasColumnName("longitud_pies");

                    b.Property<decimal?>("LongitudTotalMunon")
                        .HasColumnType("decimal(5, 2)")
                        .HasColumnName("longitud_total_munon");

                    b.Property<decimal?>("MlSobreRodilla")
                        .HasColumnType("decimal(5, 2)")
                        .HasColumnName("ml_sobre_rodilla");

                    b.Property<decimal?>("MlSupracondilar")
                        .HasColumnType("decimal(5, 2)")
                        .HasColumnName("ml_supracondilar");

                    b.Property<decimal?>("MlTendon")
                        .HasColumnType("decimal(5, 2)")
                        .HasColumnName("ml_tendon");

                    b.Property<string>("Notas")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("notas");

                    b.Property<string>("Protesista")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("protesista");

                    b.HasKey("IdMedida")
                        .HasName("PK__Medida_T__E038E090D5A27E17");

                    b.HasIndex("IdEscaneo");

                    b.HasIndex("IdLiner");

                    b.HasIndex("IdPaciente");

                    b.ToTable("Medida_Transtibial", (string)null);
                });

            modelBuilder.Entity("ProtoScaner.Server.Models.MedidasCircunferenciaPrueba", b =>
                {
                    b.Property<int>("IdMedida")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id_medida");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("IdMedida"));

                    b.Property<int?>("IdValor")
                        .HasColumnType("int")
                        .HasColumnName("id_valor");

                    b.Property<int?>("NumeroCircunferencia")
                        .HasColumnType("int")
                        .HasColumnName("numero_circunferencia");

                    b.Property<decimal?>("ValorMm")
                        .HasColumnType("decimal(10, 2)")
                        .HasColumnName("valor_mm");

                    b.HasKey("IdMedida")
                        .HasName("PK__MedidasC__E038E090F59CA66E");

                    b.HasIndex("IdValor");

                    b.ToTable("MedidasCircunferencia_Prueba", (string)null);
                });

            modelBuilder.Entity("ProtoScaner.Server.Models.MedidasCircunferencium", b =>
                {
                    b.Property<int>("IdMedida")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id_medida");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("IdMedida"));

                    b.Property<int?>("IdValor")
                        .HasColumnType("int")
                        .HasColumnName("id_valor");

                    b.Property<int?>("NumeroCircunferencia")
                        .HasColumnType("int")
                        .HasColumnName("numero_circunferencia");

                    b.Property<decimal?>("ValorMm")
                        .HasColumnType("decimal(10, 2)")
                        .HasColumnName("valor_mm");

                    b.HasKey("IdMedida")
                        .HasName("PK__MedidasC__E038E09014E772D5");

                    b.HasIndex("IdValor");

                    b.ToTable("MedidasCircunferencia");
                });

            modelBuilder.Entity("ProtoScaner.Server.Models.Paciente", b =>
                {
                    b.Property<int>("IdPaciente")
                        .HasColumnType("int")
                        .HasColumnName("Id_paciente");

                    b.Property<string>("Cedula")
                        .HasMaxLength(11)
                        .IsUnicode(false)
                        .HasColumnType("varchar(11)")
                        .HasColumnName("cedula");

                    b.Property<string>("Comentario")
                        .HasColumnType("text");

                    b.Property<string>("Direccion")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("direccion");

                    b.Property<DateOnly?>("FechaNacimiento")
                        .HasColumnType("date")
                        .HasColumnName("fecha_nacimiento");

                    b.Property<byte[]>("FotoPaciente")
                        .HasColumnType("varbinary(max)")
                        .HasColumnName("foto_paciente");

                    b.Property<int?>("Genero")
                        .HasColumnType("int");

                    b.Property<int?>("IdEstatusPaciente")
                        .HasColumnType("int")
                        .HasColumnName("Id_Estatus_paciente");

                    b.Property<int?>("IdEstatusProtesis")
                        .HasColumnType("int")
                        .HasColumnName("Id_Estatus_protesis");

                    b.Property<int?>("IdProvincia")
                        .HasColumnType("int")
                        .HasColumnName("Id_Provincia");

                    b.Property<bool?>("Insidencia")
                        .HasColumnType("bit");

                    b.Property<string>("NombreCompleto")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("nombre_completo");

                    b.Property<string>("Sector")
                        .HasMaxLength(1)
                        .IsUnicode(false)
                        .HasColumnType("varchar(1)")
                        .HasColumnName("sector");

                    b.Property<string>("Telefono")
                        .HasMaxLength(15)
                        .IsUnicode(false)
                        .HasColumnType("varchar(15)")
                        .HasColumnName("telefono");

                    b.Property<string>("TelefonoCelular")
                        .HasMaxLength(15)
                        .IsUnicode(false)
                        .HasColumnType("varchar(15)")
                        .HasColumnName("telefono_celular");

                    b.HasKey("IdPaciente")
                        .HasName("PK__Paciente__3874F59A74D68654");

                    b.HasIndex("Genero");

                    b.HasIndex("IdEstatusPaciente");

                    b.HasIndex("IdEstatusProtesis");

                    b.HasIndex("IdProvincia");

                    b.ToTable("Paciente", (string)null);
                });

            modelBuilder.Entity("ProtoScaner.Server.Models.Protesi", b =>
                {
                    b.Property<int>("IdProtesis")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id_protesis");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("IdProtesis"));

                    b.Property<int>("CodigoPaciente")
                        .HasColumnType("int")
                        .HasColumnName("codigo_paciente");

                    b.Property<DateOnly?>("FechaEntrega")
                        .HasColumnType("date")
                        .HasColumnName("fecha_entrega");

                    b.Property<int?>("LinerTamano")
                        .HasColumnType("int")
                        .HasColumnName("liner_tamano");

                    b.Property<int?>("LinerTipo")
                        .HasColumnType("int")
                        .HasColumnName("liner_tipo");

                    b.Property<string>("Material")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("material");

                    b.Property<string>("Protesista")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("protesista");

                    b.HasKey("IdProtesis")
                        .HasName("PK__Protesis__D4FF3CA8D2BC6127");

                    b.HasIndex("CodigoPaciente");

                    b.HasIndex("LinerTamano");

                    b.HasIndex("LinerTipo");

                    b.ToTable("Protesis", (string)null);
                });

            modelBuilder.Entity("ProtoScaner.Server.Models.ProtesisComponente", b =>
                {
                    b.Property<int>("ProtesisId")
                        .HasColumnType("int")
                        .HasColumnName("ProtesisID");

                    b.Property<int>("ComponentId")
                        .HasColumnType("int")
                        .HasColumnName("ComponentID");

                    b.Property<int?>("Cantidad")
                        .HasColumnType("int");

                    b.HasKey("ProtesisId", "ComponentId")
                        .HasName("PK__Protesis__87BBF254B0581971");

                    b.HasIndex("ComponentId");

                    b.ToTable("Protesis_Componentes", (string)null);
                });

            modelBuilder.Entity("ProtoScaner.Server.Models.Provincium", b =>
                {
                    b.Property<int>("IdProvincia")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("Id_Provincia");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("IdProvincia"));

                    b.Property<string>("NombreProvincia")
                        .HasMaxLength(30)
                        .IsUnicode(false)
                        .HasColumnType("varchar(30)")
                        .HasColumnName("Nombre_Provincia");

                    b.HasKey("IdProvincia")
                        .HasName("PK__Provinci__1B62027383B2EB62");

                    b.ToTable("Provincia");
                });

            modelBuilder.Entity("ProtoScaner.Server.Models.PruebaSocket", b =>
                {
                    b.Property<int>("IdPrueba")
                        .HasColumnType("int")
                        .HasColumnName("id_prueba");

                    b.Property<string>("DuracionTerapia")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("duracion_terapia");

                    b.Property<DateOnly?>("FechaFallo")
                        .HasColumnType("date")
                        .HasColumnName("fecha_fallo");

                    b.Property<DateOnly?>("FechaMantenimientoPostEntrega")
                        .HasColumnType("date")
                        .HasColumnName("fecha_mantenimiento_post_entrega");

                    b.Property<DateOnly?>("FechaPractica")
                        .HasColumnType("date")
                        .HasColumnName("fecha_practica");

                    b.Property<DateOnly?>("FechaPrueba")
                        .HasColumnType("date")
                        .HasColumnName("fecha_prueba");

                    b.Property<int?>("IdComponente")
                        .HasColumnType("int")
                        .HasColumnName("Id_Componente");

                    b.Property<int?>("IdPaciente")
                        .HasColumnType("int")
                        .HasColumnName("Id_paciente");

                    b.Property<int?>("IdSocket")
                        .HasColumnType("int")
                        .HasColumnName("Id_socket");

                    b.Property<int?>("IdUsuario")
                        .HasColumnType("int")
                        .HasColumnName("Id_Usuario");

                    b.Property<string>("MaterialRellenoUsado")
                        .HasColumnType("text")
                        .HasColumnName("material_relleno_usado");

                    b.Property<string>("ModificacionGeneral")
                        .HasColumnType("text")
                        .HasColumnName("modificacion_general");

                    b.Property<bool?>("PracticaMarcha")
                        .HasColumnType("bit")
                        .HasColumnName("practica_marcha");

                    b.Property<bool?>("PracticaRecibida")
                        .HasColumnType("bit")
                        .HasColumnName("practica_recibida");

                    b.Property<string>("QuienLaHizo")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("quien_la_hizo");

                    b.Property<bool?>("SocketFallo")
                        .HasColumnType("bit")
                        .HasColumnName("socket_fallo");

                    b.HasKey("IdPrueba")
                        .HasName("PK__Prueba_S__328A45731C2FD3F5");

                    b.HasIndex("IdComponente");

                    b.HasIndex("IdPaciente");

                    b.HasIndex("IdSocket");

                    b.HasIndex("IdUsuario");

                    b.ToTable("Prueba_Socket", (string)null);
                });

            modelBuilder.Entity("ProtoScaner.Server.Models.Reporte", b =>
                {
                    b.Property<int>("IdReporte")
                        .HasColumnType("int")
                        .HasColumnName("id_reporte");

                    b.Property<int?>("CodigoPaciente")
                        .HasColumnType("int")
                        .HasColumnName("codigo_paciente");

                    b.Property<int?>("NumSocketsFabricados")
                        .HasColumnType("int")
                        .HasColumnName("num_sockets_fabricados");

                    b.HasKey("IdReporte")
                        .HasName("PK__Reportes__87E4F5CB49E6CF98");

                    b.HasIndex("CodigoPaciente");

                    b.HasIndex("NumSocketsFabricados");

                    b.ToTable("Reportes");
                });

            modelBuilder.Entity("ProtoScaner.Server.Models.Rol", b =>
                {
                    b.Property<int>("IdRol")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id_rol");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("IdRol"));

                    b.Property<string>("Descripcion")
                        .HasColumnType("text")
                        .HasColumnName("descripcion");

                    b.Property<string>("NombreRol")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("nombre_rol");

                    b.HasKey("IdRol")
                        .HasName("PK__Rol__6ABCB5E0F9009A3B");

                    b.HasIndex(new[] { "NombreRol" }, "UQ__Rol__673CB43570AC484A")
                        .IsUnique();

                    b.ToTable("Rol", (string)null);
                });

            modelBuilder.Entity("ProtoScaner.Server.Models.SocketPaciente", b =>
                {
                    b.Property<int>("IdSocket")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("Id_socket");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("IdSocket"));

                    b.Property<string>("Descripcion")
                        .HasColumnType("text")
                        .HasColumnName("descripcion");

                    b.Property<DateOnly?>("FechaCreacion")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("date")
                        .HasColumnName("fecha_creacion")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<int?>("IdPaciente")
                        .HasColumnType("int")
                        .HasColumnName("Id_paciente");

                    b.Property<string>("Tamaño")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("tamaño");

                    b.HasKey("IdSocket")
                        .HasName("PK__Socket_P__14CC4DA6A1BCEB76");

                    b.HasIndex("IdPaciente");

                    b.ToTable("Socket_Paciente", (string)null);
                });

            modelBuilder.Entity("ProtoScaner.Server.Models.Talla", b =>
                {
                    b.Property<int>("IdTalla")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("Id_Talla");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("IdTalla"));

                    b.Property<string>("TallaNombre")
                        .IsRequired()
                        .HasMaxLength(30)
                        .IsUnicode(false)
                        .HasColumnType("varchar(30)");

                    b.HasKey("IdTalla")
                        .HasName("PK__Tallas__A135FE6EDC15A448");

                    b.ToTable("Tallas");
                });

            modelBuilder.Entity("ProtoScaner.Server.Models.TipoAmputacion", b =>
                {
                    b.Property<int>("IdAmputacion")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("Id_amputacion");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("IdAmputacion"));

                    b.Property<string>("TipoAmputacion1")
                        .HasMaxLength(30)
                        .IsUnicode(false)
                        .HasColumnType("varchar(30)")
                        .HasColumnName("tipo_amputacion");

                    b.HasKey("IdAmputacion")
                        .HasName("PK__Tipo_Amp__1A5D1A33D43D0397");

                    b.ToTable("Tipo_Amputacion", (string)null);
                });

            modelBuilder.Entity("ProtoScaner.Server.Models.TipoLiner", b =>
                {
                    b.Property<int>("IdTipoLiner")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("Id_TipoLiner");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("IdTipoLiner"));

                    b.Property<string>("TipoNombre")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.HasKey("IdTipoLiner")
                        .HasName("PK__Tipo_Lin__EAA776676FEE0F1A");

                    b.ToTable("Tipo_Liner", (string)null);
                });

            modelBuilder.Entity("ProtoScaner.Server.Models.TomaMedidasEscaneo", b =>
                {
                    b.Property<int>("IdEscaneo")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id_escaneo");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("IdEscaneo"));

                    b.Property<string>("Comentario")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("comentario");

                    b.Property<DateOnly?>("FechaEscaneo")
                        .HasColumnType("date")
                        .HasColumnName("fecha_escaneo");

                    b.Property<byte[]>("FotosMunon")
                        .HasColumnType("varbinary(max)")
                        .HasColumnName("fotos_munon");

                    b.Property<int?>("IdAmputacion")
                        .HasColumnType("int")
                        .HasColumnName("Id_amputacion");

                    b.Property<int?>("IdLiner")
                        .HasColumnType("int")
                        .HasColumnName("Id_Liner");

                    b.Property<int?>("IdPaciente")
                        .HasColumnType("int")
                        .HasColumnName("Id_paciente");

                    b.Property<byte[]>("ResultadoDoc")
                        .HasColumnType("varbinary(max)")
                        .HasColumnName("resultadoDoc");

                    b.Property<string>("ResultadoScaneo")
                        .HasColumnType("text")
                        .HasColumnName("Resultado_scaneo");

                    b.HasKey("IdEscaneo")
                        .HasName("PK__Toma_med__83D46B0D3B64D724");

                    b.HasIndex("IdAmputacion");

                    b.HasIndex("IdLiner");

                    b.HasIndex("IdPaciente");

                    b.ToTable("Toma_medidas_escaneo", (string)null);
                });

            modelBuilder.Entity("ProtoScaner.Server.Models.TranstibialPrueba", b =>
                {
                    b.Property<int>("IdEscaneo")
                        .HasColumnType("int")
                        .HasColumnName("id_escaneo");

                    b.Property<string>("AlturaTacon")
                        .HasMaxLength(30)
                        .IsUnicode(false)
                        .HasColumnType("varchar(30)")
                        .HasColumnName("altura_tacon");

                    b.Property<decimal?>("ApTension")
                        .HasColumnType("decimal(5, 2)")
                        .HasColumnName("ap_tension");

                    b.Property<decimal?>("Circunferencia12cm")
                        .HasColumnType("decimal(5, 2)")
                        .HasColumnName("circunferencia_12cm");

                    b.Property<decimal?>("Circunferencia15cm")
                        .HasColumnType("decimal(5, 2)")
                        .HasColumnName("circunferencia_15cm");

                    b.Property<decimal?>("Circunferencia21cm")
                        .HasColumnType("decimal(5, 2)")
                        .HasColumnName("circunferencia_21cm");

                    b.Property<decimal?>("Circunferencia24cm")
                        .HasColumnType("decimal(5, 2)")
                        .HasColumnName("circunferencia_24cm");

                    b.Property<decimal?>("Circunferencia27cm")
                        .HasColumnType("decimal(5, 2)")
                        .HasColumnName("circunferencia_27cm");

                    b.Property<decimal?>("Circunferencia30cm")
                        .HasColumnType("decimal(5, 2)")
                        .HasColumnName("circunferencia_30cm");

                    b.Property<decimal?>("Circunferencia3cm")
                        .HasColumnType("decimal(5, 2)")
                        .HasColumnName("circunferencia_3cm");

                    b.Property<decimal?>("Circunferencia6cm")
                        .HasColumnType("decimal(5, 2)")
                        .HasColumnName("circunferencia_6cm");

                    b.Property<decimal?>("Circunferencia9cm")
                        .HasColumnType("decimal(5, 2)")
                        .HasColumnName("circunferencia_9cm");

                    b.Property<DateOnly?>("FechaEscaneo")
                        .HasColumnType("date")
                        .HasColumnName("fecha_escaneo");

                    b.Property<int?>("IdLiner")
                        .HasColumnType("int")
                        .HasColumnName("Id_Liner");

                    b.Property<int?>("IdPaciente")
                        .HasColumnType("int")
                        .HasColumnName("Id_paciente");

                    b.Property<int?>("IdPrueba")
                        .HasColumnType("int")
                        .HasColumnName("Id_prueba");

                    b.Property<string>("LongitudOsea")
                        .HasMaxLength(30)
                        .IsUnicode(false)
                        .HasColumnType("varchar(30)")
                        .HasColumnName("longitud_osea");

                    b.Property<string>("LongitudPies")
                        .HasMaxLength(30)
                        .IsUnicode(false)
                        .HasColumnType("varchar(30)")
                        .HasColumnName("longitud_pies");

                    b.Property<decimal?>("LongitudTotalMunon")
                        .HasColumnType("decimal(5, 2)")
                        .HasColumnName("longitud_total_munon");

                    b.Property<decimal?>("MlSobreRodilla")
                        .HasColumnType("decimal(5, 2)")
                        .HasColumnName("ml_sobre_rodilla");

                    b.Property<decimal?>("MlSupracondilar")
                        .HasColumnType("decimal(5, 2)")
                        .HasColumnName("ml_supracondilar");

                    b.Property<decimal?>("MlTendon")
                        .HasColumnType("decimal(5, 2)")
                        .HasColumnName("ml_tendon");

                    b.Property<string>("Notas")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("notas");

                    b.Property<string>("Protesista")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("protesista");

                    b.HasKey("IdEscaneo")
                        .HasName("PK__Transtib__83D46B0D6A357B8B");

                    b.HasIndex("IdLiner");

                    b.HasIndex("IdPaciente");

                    b.HasIndex("IdPrueba");

                    b.ToTable("Transtibial_Prueba", (string)null);
                });

            modelBuilder.Entity("ProtoScaner.Server.Models.Usuario", b =>
                {
                    b.Property<int>("IdUsuario")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id_usuario");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("IdUsuario"));

                    b.Property<bool?>("Activo")
                        .HasColumnType("bit")
                        .HasColumnName("activo");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("email");

                    b.Property<DateOnly?>("FechaCreacion")
                        .HasColumnType("date")
                        .HasColumnName("fecha_creacion");

                    b.Property<int?>("IdRol")
                        .HasColumnType("int")
                        .HasColumnName("id_rol");

                    b.Property<string>("NombreUsuario")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("nombre_usuario");

                    b.Property<string>("PasswordHash")
                        .IsRequired()
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("password_hash");

                    b.HasKey("IdUsuario")
                        .HasName("PK__Usuario__4E3E04AD5B8FAE9D");

                    b.HasIndex("IdRol");

                    b.HasIndex(new[] { "Email" }, "UQ__Usuario__AB6E6164B7C17AB9")
                        .IsUnique();

                    b.HasIndex(new[] { "NombreUsuario" }, "UQ__Usuario__D4D22D743A7B762B")
                        .IsUnique();

                    b.ToTable("Usuario", (string)null);
                });

            modelBuilder.Entity("ProtoScaner.Server.Models.Componente", b =>
                {
                    b.HasOne("ProtoScaner.Server.Models.ComponenteTipo", "ComponentTipo")
                        .WithMany("Componentes")
                        .HasForeignKey("ComponentTipoId")
                        .HasConstraintName("FK__Component__Compo__628FA481");

                    b.Navigation("ComponentTipo");
                });

            modelBuilder.Entity("ProtoScaner.Server.Models.Entrega", b =>
                {
                    b.HasOne("ProtoScaner.Server.Models.Mantenimiento", "IdMantenimientoNavigation")
                        .WithMany("Entregas")
                        .HasForeignKey("IdMantenimiento")
                        .HasConstraintName("FK__Entregas__Id_man__2FCF1A8A");

                    b.HasOne("ProtoScaner.Server.Models.Paciente", "IdPacienteNavigation")
                        .WithMany("Entregas")
                        .HasForeignKey("IdPaciente")
                        .HasConstraintName("FK__Entregas__Id_Pac__2CF2ADDF");

                    b.HasOne("ProtoScaner.Server.Models.Protesi", "IdProtesisNavigation")
                        .WithMany("Entregas")
                        .HasForeignKey("IdProtesis")
                        .HasConstraintName("FK__Entregas__Id_Pro__2DE6D218");

                    b.HasOne("ProtoScaner.Server.Models.PruebaSocket", "IdPruebaSocketNavigation")
                        .WithMany("Entregas")
                        .HasForeignKey("IdPruebaSocket")
                        .HasConstraintName("FK__Entregas__Id_pru__30C33EC3");

                    b.HasOne("ProtoScaner.Server.Models.Usuario", "IdUsuarioNavigation")
                        .WithMany("Entregas")
                        .HasForeignKey("IdUsuario")
                        .HasConstraintName("FK__Entregas__Id_Usu__2EDAF651");

                    b.Navigation("IdMantenimientoNavigation");

                    b.Navigation("IdPacienteNavigation");

                    b.Navigation("IdProtesisNavigation");

                    b.Navigation("IdPruebaSocketNavigation");

                    b.Navigation("IdUsuarioNavigation");
                });

            modelBuilder.Entity("ProtoScaner.Server.Models.HistorialCambio", b =>
                {
                    b.HasOne("ProtoScaner.Server.Models.Usuario", "IdUsuarioNavigation")
                        .WithMany("HistorialCambios")
                        .HasForeignKey("IdUsuario")
                        .OnDelete(DeleteBehavior.Cascade)
                        .HasConstraintName("FK__Historial__id_us__4222D4EF");

                    b.Navigation("IdUsuarioNavigation");
                });

            modelBuilder.Entity("ProtoScaner.Server.Models.HistorialLogin", b =>
                {
                    b.HasOne("ProtoScaner.Server.Models.Usuario", "IdUsuarioNavigation")
                        .WithMany("HistorialLogins")
                        .HasForeignKey("IdUsuario")
                        .OnDelete(DeleteBehavior.Cascade)
                        .HasConstraintName("FK__Historial__id_us__3F466844");

                    b.Navigation("IdUsuarioNavigation");
                });

            modelBuilder.Entity("ProtoScaner.Server.Models.HistorialPacienteIngreso", b =>
                {
                    b.HasOne("ProtoScaner.Server.Models.CausaAmputacion", "CausaNavigation")
                        .WithMany("HistorialPacienteIngresos")
                        .HasForeignKey("Causa")
                        .HasConstraintName("FK__Historial__Causa__5AEE82B9");

                    b.HasOne("ProtoScaner.Server.Models.Paciente", "IdPacienteNavigation")
                        .WithMany("HistorialPacienteIngresos")
                        .HasForeignKey("IdPaciente")
                        .HasConstraintName("FK__Historial__Id_pa__5812160E");

                    b.HasOne("ProtoScaner.Server.Models.LadoAmputacion", "LadoAmputacionNavigation")
                        .WithMany("HistorialPacienteIngresos")
                        .HasForeignKey("LadoAmputacion")
                        .HasConstraintName("FK__Historial__lado___59FA5E80");

                    b.HasOne("ProtoScaner.Server.Models.TipoAmputacion", "TipoAmputacionNavigation")
                        .WithMany("HistorialPacienteIngresos")
                        .HasForeignKey("TipoAmputacion")
                        .HasConstraintName("FK__Historial__tipo___59063A47");

                    b.Navigation("CausaNavigation");

                    b.Navigation("IdPacienteNavigation");

                    b.Navigation("LadoAmputacionNavigation");

                    b.Navigation("TipoAmputacionNavigation");
                });

            modelBuilder.Entity("ProtoScaner.Server.Models.ImagenPerfil", b =>
                {
                    b.HasOne("ProtoScaner.Server.Models.Usuario", "IdUsuarioNavigation")
                        .WithMany("ImagenPerfils")
                        .HasForeignKey("IdUsuario")
                        .OnDelete(DeleteBehavior.Cascade)
                        .HasConstraintName("FK__Imagen_Pe__Id_us__5DCAEF64");

                    b.Navigation("IdUsuarioNavigation");
                });

            modelBuilder.Entity("ProtoScaner.Server.Models.Insidencia", b =>
                {
                    b.HasOne("ProtoScaner.Server.Models.Entrega", "IdEntregasNavigation")
                        .WithMany("InsidenciaNavigation")
                        .HasForeignKey("IdEntregas")
                        .HasConstraintName("FK__Insidenci__Id_En__339FAB6E");

                    b.HasOne("ProtoScaner.Server.Models.Paciente", "IdPacienteNavigation")
                        .WithMany("InsidenciaNavigation")
                        .HasForeignKey("IdPaciente")
                        .HasConstraintName("FK__Insidenci__Id_Pa__3493CFA7");

                    b.HasOne("ProtoScaner.Server.Models.Protesi", "IdProtesisNavigation")
                        .WithMany("Insidencia")
                        .HasForeignKey("IdProtesis")
                        .HasConstraintName("FK__Insidenci__Id_Pr__3587F3E0");

                    b.HasOne("ProtoScaner.Server.Models.Mantenimiento", "IdUsuarioNavigation")
                        .WithMany("Insidencia")
                        .HasForeignKey("IdUsuario")
                        .HasConstraintName("FK__Insidenci__Id_Us__367C1819");

                    b.Navigation("IdEntregasNavigation");

                    b.Navigation("IdPacienteNavigation");

                    b.Navigation("IdProtesisNavigation");

                    b.Navigation("IdUsuarioNavigation");
                });

            modelBuilder.Entity("ProtoScaner.Server.Models.LinerTransfemoral", b =>
                {
                    b.HasOne("ProtoScaner.Server.Models.Talla", "Talla")
                        .WithMany("LinerTransfemorals")
                        .HasForeignKey("TallaId")
                        .HasConstraintName("FK__Liner_Tra__Talla__6EF57B66");

                    b.Navigation("Talla");
                });

            modelBuilder.Entity("ProtoScaner.Server.Models.LinerTranstibial", b =>
                {
                    b.HasOne("ProtoScaner.Server.Models.Talla", "Talla")
                        .WithMany("LinerTranstibials")
                        .HasForeignKey("TallaId")
                        .HasConstraintName("FK__Liner_Tra__Talla__6C190EBB");

                    b.HasOne("ProtoScaner.Server.Models.TipoLiner", "TipoLiner")
                        .WithMany("LinerTranstibials")
                        .HasForeignKey("TipoLinerId")
                        .HasConstraintName("FK__Liner_Tra__TipoL__6B24EA82");

                    b.Navigation("Talla");

                    b.Navigation("TipoLiner");
                });

            modelBuilder.Entity("ProtoScaner.Server.Models.Mantenimiento", b =>
                {
                    b.HasOne("ProtoScaner.Server.Models.Paciente", "IdPacienteNavigation")
                        .WithMany("Mantenimientos")
                        .HasForeignKey("IdPaciente")
                        .HasConstraintName("FK__Mantenimi__id_co__2180FB33");

                    b.HasOne("ProtoScaner.Server.Models.Protesi", "IdProtesisNavigation")
                        .WithMany("Mantenimientos")
                        .HasForeignKey("IdProtesis")
                        .HasConstraintName("FK__Mantenimi__Id_pr__22751F6C");

                    b.HasOne("ProtoScaner.Server.Models.SocketPaciente", "IdSocketNavigation")
                        .WithMany("Mantenimientos")
                        .HasForeignKey("IdSocket")
                        .OnDelete(DeleteBehavior.Cascade)
                        .HasConstraintName("FK__Mantenimi__Id_so__236943A5");

                    b.Navigation("IdPacienteNavigation");

                    b.Navigation("IdProtesisNavigation");

                    b.Navigation("IdSocketNavigation");
                });

            modelBuilder.Entity("ProtoScaner.Server.Models.MantenimientoComponente", b =>
                {
                    b.HasOne("ProtoScaner.Server.Models.Componente", "Component")
                        .WithMany("MantenimientoComponentes")
                        .HasForeignKey("ComponentId")
                        .IsRequired()
                        .HasConstraintName("FK__Mantenimi__Compo__2739D489");

                    b.HasOne("ProtoScaner.Server.Models.Paciente", "IdPacienteNavigation")
                        .WithMany("MantenimientoComponentes")
                        .HasForeignKey("IdPaciente")
                        .HasConstraintName("FK__Mantenimi__Id_pa__29221CFB");

                    b.HasOne("ProtoScaner.Server.Models.Mantenimiento", "Mantenimiento")
                        .WithMany("MantenimientoComponentes")
                        .HasForeignKey("MantenimientoId")
                        .HasConstraintName("FK__Mantenimi__Mante__282DF8C2");

                    b.HasOne("ProtoScaner.Server.Models.TomaMedidasEscaneo", "MedidasNavigation")
                        .WithMany("MantenimientoComponentes")
                        .HasForeignKey("Medidas")
                        .HasConstraintName("FK__Mantenimi__Medid__2A164134");

                    b.HasOne("ProtoScaner.Server.Models.Protesi", "Protesis")
                        .WithMany("MantenimientoComponentes")
                        .HasForeignKey("ProtesisId")
                        .IsRequired()
                        .HasConstraintName("FK__Mantenimi__Prote__2645B050");

                    b.Navigation("Component");

                    b.Navigation("IdPacienteNavigation");

                    b.Navigation("Mantenimiento");

                    b.Navigation("MedidasNavigation");

                    b.Navigation("Protesis");
                });

            modelBuilder.Entity("ProtoScaner.Server.Models.MedidaTransfemoral", b =>
                {
                    b.HasOne("ProtoScaner.Server.Models.TomaMedidasEscaneo", "IdEscaneoNavigation")
                        .WithMany("MedidaTransfemorals")
                        .HasForeignKey("IdEscaneo")
                        .HasConstraintName("FK__Medida_Tr__Id_es__7C4F7684");

                    b.HasOne("ProtoScaner.Server.Models.LinerTransfemoral", "IdLinerNavigation")
                        .WithMany("MedidaTransfemorals")
                        .HasForeignKey("IdLiner")
                        .HasConstraintName("FK__Medida_Tr__id_Li__7B5B524B");

                    b.HasOne("ProtoScaner.Server.Models.Paciente", "IdPacienteNavigation")
                        .WithMany("MedidaTransfemorals")
                        .HasForeignKey("IdPaciente")
                        .HasConstraintName("FK__Medida_Tr__Id_pa__7D439ABD");

                    b.Navigation("IdEscaneoNavigation");

                    b.Navigation("IdLinerNavigation");

                    b.Navigation("IdPacienteNavigation");
                });

            modelBuilder.Entity("ProtoScaner.Server.Models.MedidaTransfemoralPrueba", b =>
                {
                    b.HasOne("ProtoScaner.Server.Models.LinerTransfemoral", "IdLinerNavigation")
                        .WithMany("MedidaTransfemoralPruebas")
                        .HasForeignKey("IdLiner")
                        .HasConstraintName("FK__Medida_Tr__id_Li__123EB7A3");

                    b.HasOne("ProtoScaner.Server.Models.Paciente", "IdPacienteNavigation")
                        .WithMany("MedidaTransfemoralPruebas")
                        .HasForeignKey("IdPaciente")
                        .HasConstraintName("FK__Medida_Tr__Id_pa__114A936A");

                    b.HasOne("ProtoScaner.Server.Models.PruebaSocket", "IdPruebaNavigation")
                        .WithMany("MedidaTransfemoralPruebas")
                        .HasForeignKey("IdPrueba")
                        .HasConstraintName("FK__Medida_Tr__Id_pr__1332DBDC");

                    b.Navigation("IdLinerNavigation");

                    b.Navigation("IdPacienteNavigation");

                    b.Navigation("IdPruebaNavigation");
                });

            modelBuilder.Entity("ProtoScaner.Server.Models.MedidaTranstibial", b =>
                {
                    b.HasOne("ProtoScaner.Server.Models.TomaMedidasEscaneo", "IdEscaneoNavigation")
                        .WithMany("MedidaTranstibials")
                        .HasForeignKey("IdEscaneo")
                        .HasConstraintName("FK__Medida_Tr__Id_es__778AC167");

                    b.HasOne("ProtoScaner.Server.Models.LinerTranstibial", "IdLinerNavigation")
                        .WithMany("MedidaTranstibials")
                        .HasForeignKey("IdLiner")
                        .HasConstraintName("FK__Medida_Tr__Id_Li__76969D2E");

                    b.HasOne("ProtoScaner.Server.Models.Paciente", "IdPacienteNavigation")
                        .WithMany("MedidaTranstibials")
                        .HasForeignKey("IdPaciente")
                        .HasConstraintName("FK__Medida_Tr__Id_pa__787EE5A0");

                    b.Navigation("IdEscaneoNavigation");

                    b.Navigation("IdLinerNavigation");

                    b.Navigation("IdPacienteNavigation");
                });

            modelBuilder.Entity("ProtoScaner.Server.Models.MedidasCircunferenciaPrueba", b =>
                {
                    b.HasOne("ProtoScaner.Server.Models.MedidaTransfemoralPrueba", "IdValorNavigation")
                        .WithMany("MedidasCircunferenciaPruebas")
                        .HasForeignKey("IdValor")
                        .HasConstraintName("FK__MedidasCi__id_va__160F4887");

                    b.Navigation("IdValorNavigation");
                });

            modelBuilder.Entity("ProtoScaner.Server.Models.MedidasCircunferencium", b =>
                {
                    b.HasOne("ProtoScaner.Server.Models.MedidaTransfemoral", "IdValorNavigation")
                        .WithMany("MedidasCircunferencia")
                        .HasForeignKey("IdValor")
                        .HasConstraintName("FK__MedidasCi__id_va__00200768");

                    b.Navigation("IdValorNavigation");
                });

            modelBuilder.Entity("ProtoScaner.Server.Models.Paciente", b =>
                {
                    b.HasOne("ProtoScaner.Server.Models.Genero", "GeneroNavigation")
                        .WithMany("Pacientes")
                        .HasForeignKey("Genero")
                        .HasConstraintName("FK__Paciente__Genero__534D60F1");

                    b.HasOne("ProtoScaner.Server.Models.EstatusPaciente", "IdEstatusPacienteNavigation")
                        .WithMany("Pacientes")
                        .HasForeignKey("IdEstatusPaciente")
                        .HasConstraintName("FK__Paciente__Id_Est__52593CB8");

                    b.HasOne("ProtoScaner.Server.Models.EstatusProtesi", "IdEstatusProtesisNavigation")
                        .WithMany("Pacientes")
                        .HasForeignKey("IdEstatusProtesis")
                        .HasConstraintName("FK__Paciente__Id_Est__5165187F");

                    b.HasOne("ProtoScaner.Server.Models.Provincium", "IdProvinciaNavigation")
                        .WithMany("Pacientes")
                        .HasForeignKey("IdProvincia")
                        .HasConstraintName("FK__Paciente__Id_Pro__5070F446");

                    b.Navigation("GeneroNavigation");

                    b.Navigation("IdEstatusPacienteNavigation");

                    b.Navigation("IdEstatusProtesisNavigation");

                    b.Navigation("IdProvinciaNavigation");
                });

            modelBuilder.Entity("ProtoScaner.Server.Models.Protesi", b =>
                {
                    b.HasOne("ProtoScaner.Server.Models.Paciente", "CodigoPacienteNavigation")
                        .WithMany("Protesis")
                        .HasForeignKey("CodigoPaciente")
                        .IsRequired()
                        .HasConstraintName("FK__Protesis__codigo__18EBB532");

                    b.HasOne("ProtoScaner.Server.Models.Talla", "LinerTamanoNavigation")
                        .WithMany("Protesis")
                        .HasForeignKey("LinerTamano")
                        .HasConstraintName("FK__Protesis__liner___1AD3FDA4");

                    b.HasOne("ProtoScaner.Server.Models.TipoLiner", "LinerTipoNavigation")
                        .WithMany("Protesis")
                        .HasForeignKey("LinerTipo")
                        .HasConstraintName("FK__Protesis__liner___19DFD96B");

                    b.Navigation("CodigoPacienteNavigation");

                    b.Navigation("LinerTamanoNavigation");

                    b.Navigation("LinerTipoNavigation");
                });

            modelBuilder.Entity("ProtoScaner.Server.Models.ProtesisComponente", b =>
                {
                    b.HasOne("ProtoScaner.Server.Models.Componente", "Component")
                        .WithMany("ProtesisComponentes")
                        .HasForeignKey("ComponentId")
                        .IsRequired()
                        .HasConstraintName("FK__Protesis___Compo__1EA48E88");

                    b.HasOne("ProtoScaner.Server.Models.Protesi", "Protesis")
                        .WithMany("ProtesisComponentes")
                        .HasForeignKey("ProtesisId")
                        .IsRequired()
                        .HasConstraintName("FK__Protesis___Prote__1DB06A4F");

                    b.Navigation("Component");

                    b.Navigation("Protesis");
                });

            modelBuilder.Entity("ProtoScaner.Server.Models.PruebaSocket", b =>
                {
                    b.HasOne("ProtoScaner.Server.Models.Componente", "IdComponenteNavigation")
                        .WithMany("PruebaSockets")
                        .HasForeignKey("IdComponente")
                        .HasConstraintName("FK__Prueba_So__Id_Co__07C12930");

                    b.HasOne("ProtoScaner.Server.Models.Paciente", "IdPacienteNavigation")
                        .WithMany("PruebaSockets")
                        .HasForeignKey("IdPaciente")
                        .HasConstraintName("FK__Prueba_So__Id_pa__06CD04F7");

                    b.HasOne("ProtoScaner.Server.Models.SocketPaciente", "IdSocketNavigation")
                        .WithMany("PruebaSockets")
                        .HasForeignKey("IdSocket")
                        .HasConstraintName("FK__Prueba_So__Id_so__09A971A2");

                    b.HasOne("ProtoScaner.Server.Models.Usuario", "IdUsuarioNavigation")
                        .WithMany("PruebaSockets")
                        .HasForeignKey("IdUsuario")
                        .HasConstraintName("FK__Prueba_So__Id_Us__08B54D69");

                    b.Navigation("IdComponenteNavigation");

                    b.Navigation("IdPacienteNavigation");

                    b.Navigation("IdSocketNavigation");

                    b.Navigation("IdUsuarioNavigation");
                });

            modelBuilder.Entity("ProtoScaner.Server.Models.Reporte", b =>
                {
                    b.HasOne("ProtoScaner.Server.Models.Paciente", "CodigoPacienteNavigation")
                        .WithMany("Reportes")
                        .HasForeignKey("CodigoPaciente")
                        .HasConstraintName("FK__Reportes__codigo__395884C4");

                    b.HasOne("ProtoScaner.Server.Models.SocketPaciente", "NumSocketsFabricadosNavigation")
                        .WithMany("Reportes")
                        .HasForeignKey("NumSocketsFabricados")
                        .HasConstraintName("FK__Reportes__num_so__3A4CA8FD");

                    b.Navigation("CodigoPacienteNavigation");

                    b.Navigation("NumSocketsFabricadosNavigation");
                });

            modelBuilder.Entity("ProtoScaner.Server.Models.SocketPaciente", b =>
                {
                    b.HasOne("ProtoScaner.Server.Models.Paciente", "IdPacienteNavigation")
                        .WithMany("SocketPacientes")
                        .HasForeignKey("IdPaciente")
                        .OnDelete(DeleteBehavior.Cascade)
                        .HasConstraintName("FK__Socket_Pa__Id_pa__03F0984C");

                    b.Navigation("IdPacienteNavigation");
                });

            modelBuilder.Entity("ProtoScaner.Server.Models.TomaMedidasEscaneo", b =>
                {
                    b.HasOne("ProtoScaner.Server.Models.TipoAmputacion", "IdAmputacionNavigation")
                        .WithMany("TomaMedidasEscaneos")
                        .HasForeignKey("IdAmputacion")
                        .HasConstraintName("FK__Toma_medi__Id_am__72C60C4A");

                    b.HasOne("ProtoScaner.Server.Models.Liner", "IdLinerNavigation")
                        .WithMany("TomaMedidasEscaneos")
                        .HasForeignKey("IdLiner")
                        .HasConstraintName("FK__Toma_medi__Id_Li__73BA3083");

                    b.HasOne("ProtoScaner.Server.Models.Paciente", "IdPacienteNavigation")
                        .WithMany("TomaMedidasEscaneos")
                        .HasForeignKey("IdPaciente")
                        .HasConstraintName("FK__Toma_medi__Id_pa__71D1E811");

                    b.Navigation("IdAmputacionNavigation");

                    b.Navigation("IdLinerNavigation");

                    b.Navigation("IdPacienteNavigation");
                });

            modelBuilder.Entity("ProtoScaner.Server.Models.TranstibialPrueba", b =>
                {
                    b.HasOne("ProtoScaner.Server.Models.LinerTranstibial", "IdLinerNavigation")
                        .WithMany("TranstibialPruebas")
                        .HasForeignKey("IdLiner")
                        .HasConstraintName("FK__Transtibi__Id_Li__0D7A0286");

                    b.HasOne("ProtoScaner.Server.Models.Paciente", "IdPacienteNavigation")
                        .WithMany("TranstibialPruebas")
                        .HasForeignKey("IdPaciente")
                        .HasConstraintName("FK__Transtibi__Id_pa__0C85DE4D");

                    b.HasOne("ProtoScaner.Server.Models.PruebaSocket", "IdPruebaNavigation")
                        .WithMany("TranstibialPruebas")
                        .HasForeignKey("IdPrueba")
                        .HasConstraintName("FK__Transtibi__Id_pr__0E6E26BF");

                    b.Navigation("IdLinerNavigation");

                    b.Navigation("IdPacienteNavigation");

                    b.Navigation("IdPruebaNavigation");
                });

            modelBuilder.Entity("ProtoScaner.Server.Models.Usuario", b =>
                {
                    b.HasOne("ProtoScaner.Server.Models.Rol", "IdRolNavigation")
                        .WithMany("Usuarios")
                        .HasForeignKey("IdRol")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("FK__Usuario__id_rol__3C69FB99");

                    b.Navigation("IdRolNavigation");
                });

            modelBuilder.Entity("ProtoScaner.Server.Models.CausaAmputacion", b =>
                {
                    b.Navigation("HistorialPacienteIngresos");
                });

            modelBuilder.Entity("ProtoScaner.Server.Models.Componente", b =>
                {
                    b.Navigation("MantenimientoComponentes");

                    b.Navigation("ProtesisComponentes");

                    b.Navigation("PruebaSockets");
                });

            modelBuilder.Entity("ProtoScaner.Server.Models.ComponenteTipo", b =>
                {
                    b.Navigation("Componentes");
                });

            modelBuilder.Entity("ProtoScaner.Server.Models.Entrega", b =>
                {
                    b.Navigation("InsidenciaNavigation");
                });

            modelBuilder.Entity("ProtoScaner.Server.Models.EstatusPaciente", b =>
                {
                    b.Navigation("Pacientes");
                });

            modelBuilder.Entity("ProtoScaner.Server.Models.EstatusProtesi", b =>
                {
                    b.Navigation("Pacientes");
                });

            modelBuilder.Entity("ProtoScaner.Server.Models.Genero", b =>
                {
                    b.Navigation("Pacientes");
                });

            modelBuilder.Entity("ProtoScaner.Server.Models.LadoAmputacion", b =>
                {
                    b.Navigation("HistorialPacienteIngresos");
                });

            modelBuilder.Entity("ProtoScaner.Server.Models.Liner", b =>
                {
                    b.Navigation("TomaMedidasEscaneos");
                });

            modelBuilder.Entity("ProtoScaner.Server.Models.LinerTransfemoral", b =>
                {
                    b.Navigation("MedidaTransfemoralPruebas");

                    b.Navigation("MedidaTransfemorals");
                });

            modelBuilder.Entity("ProtoScaner.Server.Models.LinerTranstibial", b =>
                {
                    b.Navigation("MedidaTranstibials");

                    b.Navigation("TranstibialPruebas");
                });

            modelBuilder.Entity("ProtoScaner.Server.Models.Mantenimiento", b =>
                {
                    b.Navigation("Entregas");

                    b.Navigation("Insidencia");

                    b.Navigation("MantenimientoComponentes");
                });

            modelBuilder.Entity("ProtoScaner.Server.Models.MedidaTransfemoral", b =>
                {
                    b.Navigation("MedidasCircunferencia");
                });

            modelBuilder.Entity("ProtoScaner.Server.Models.MedidaTransfemoralPrueba", b =>
                {
                    b.Navigation("MedidasCircunferenciaPruebas");
                });

            modelBuilder.Entity("ProtoScaner.Server.Models.Paciente", b =>
                {
                    b.Navigation("Entregas");

                    b.Navigation("HistorialPacienteIngresos");

                    b.Navigation("InsidenciaNavigation");

                    b.Navigation("MantenimientoComponentes");

                    b.Navigation("Mantenimientos");

                    b.Navigation("MedidaTransfemoralPruebas");

                    b.Navigation("MedidaTransfemorals");

                    b.Navigation("MedidaTranstibials");

                    b.Navigation("Protesis");

                    b.Navigation("PruebaSockets");

                    b.Navigation("Reportes");

                    b.Navigation("SocketPacientes");

                    b.Navigation("TomaMedidasEscaneos");

                    b.Navigation("TranstibialPruebas");
                });

            modelBuilder.Entity("ProtoScaner.Server.Models.Protesi", b =>
                {
                    b.Navigation("Entregas");

                    b.Navigation("Insidencia");

                    b.Navigation("MantenimientoComponentes");

                    b.Navigation("Mantenimientos");

                    b.Navigation("ProtesisComponentes");
                });

            modelBuilder.Entity("ProtoScaner.Server.Models.Provincium", b =>
                {
                    b.Navigation("Pacientes");
                });

            modelBuilder.Entity("ProtoScaner.Server.Models.PruebaSocket", b =>
                {
                    b.Navigation("Entregas");

                    b.Navigation("MedidaTransfemoralPruebas");

                    b.Navigation("TranstibialPruebas");
                });

            modelBuilder.Entity("ProtoScaner.Server.Models.Rol", b =>
                {
                    b.Navigation("Usuarios");
                });

            modelBuilder.Entity("ProtoScaner.Server.Models.SocketPaciente", b =>
                {
                    b.Navigation("Mantenimientos");

                    b.Navigation("PruebaSockets");

                    b.Navigation("Reportes");
                });

            modelBuilder.Entity("ProtoScaner.Server.Models.Talla", b =>
                {
                    b.Navigation("LinerTransfemorals");

                    b.Navigation("LinerTranstibials");

                    b.Navigation("Protesis");
                });

            modelBuilder.Entity("ProtoScaner.Server.Models.TipoAmputacion", b =>
                {
                    b.Navigation("HistorialPacienteIngresos");

                    b.Navigation("TomaMedidasEscaneos");
                });

            modelBuilder.Entity("ProtoScaner.Server.Models.TipoLiner", b =>
                {
                    b.Navigation("LinerTranstibials");

                    b.Navigation("Protesis");
                });

            modelBuilder.Entity("ProtoScaner.Server.Models.TomaMedidasEscaneo", b =>
                {
                    b.Navigation("MantenimientoComponentes");

                    b.Navigation("MedidaTransfemorals");

                    b.Navigation("MedidaTranstibials");
                });

            modelBuilder.Entity("ProtoScaner.Server.Models.Usuario", b =>
                {
                    b.Navigation("Entregas");

                    b.Navigation("HistorialCambios");

                    b.Navigation("HistorialLogins");

                    b.Navigation("ImagenPerfils");

                    b.Navigation("PruebaSockets");
                });
#pragma warning restore 612, 618
        }
    }
}
